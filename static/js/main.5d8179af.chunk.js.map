{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Controls","styled","div","_templateObject","poll","id","type","text","correctAnswer","answers","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggle","_","_ref","checked","setState","state","react_default","a","createElement","className","Radio","toggle","label","onChange","build_default","questions","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sYAMA,IAAMA,EAAWC,UAAOC,IAAVC,KAERC,EAAO,CACX,CACEC,GAAI,EACJC,KAAM,QACNC,KAAM,0CACNC,cAAe,+CACfC,QAAS,CACP,CAAEJ,GAAI,EAAGE,KAAM,yCACf,CAAEF,GAAI,EAAGE,KAAM,gDACf,CAAEF,GAAI,EAAGE,KAAM,mBAGnB,CACEF,GAAI,EACJC,KAAM,WACNC,KAAM,8BACNC,cAAe,CAAC,QAAS,UACzBC,QAAS,CACP,CAAEJ,GAAI,EAAGE,KAAM,SACf,CAAEF,GAAI,EAAGE,KAAM,UACf,CAAEF,GAAI,EAAGE,KAAM,cAGnB,CACEF,GAAI,EACJC,KAAM,WACNC,KAAM,+CACNC,cAAe,CAAC,aAAc,OAC9BC,QAAS,CACP,CAAEJ,GAAI,EAAGE,KAAM,cACf,CAAEF,GAAI,EAAGE,KAAM,QACf,CAAEF,GAAI,EAAGE,KAAM,OACf,CAAEF,GAAI,EAAGE,KAAM,MACf,CAAEF,GAAI,EAAGE,KAAM,UAGnB,CACEF,GAAI,EACJC,KAAM,OACNC,KAAM,2DACNC,cAAe,2BAEjB,CACEH,GAAI,EACJC,KAAM,OACNC,KAAM,uCACNC,cAAe,QAEjB,CACEH,GAAI,EACJC,KAAM,QACNC,KAAM,sCACNC,cAAe,OACfC,QAAS,CACP,CAAEJ,GAAI,EAAGE,KAAM,QACf,CAAEF,GAAI,EAAGE,KAAM,SACf,CAAEF,GAAI,EAAGE,KAAM,WAwCNG,cAlCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,aAAe,SAACC,EAADC,GAAoBA,EAAdC,QAEjBV,EAAKW,SAAS,CACZjB,KAAM,WAGRM,EAAKW,SAAS,CACZjB,KAAM,UAZVM,EAAKY,MAAQ,CACXlB,KAAM,QAJSM,wEAoBV,IACCN,EAASS,KAAKS,MAAdlB,KAER,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC3B,EAAD,KACEyB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,QAAM,EAACC,MAAOzB,EAAM0B,SAAUjB,KAAKI,gBAE5CM,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMQ,UAAW9B,EAAME,KAAMA,EAAM6B,KAAK,8BA7B9BC,IAAMC,WCzDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5d8179af.chunk.js","sourcesContent":["import React from \"react\";\nimport { Radio } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport Poll from \"@termoxin/react-poll\";\nimport \"./App.css\";\n\nconst Controls = styled.div``;\n\nconst poll = [\n  {\n    id: 1,\n    type: \"radio\",\n    text: \"What is render method in React library?\",\n    correctAnswer: \"It's a function that render a React Element.\",\n    answers: [\n      { id: 1, text: \"It's a function for multiple numbers.\" },\n      { id: 2, text: \"It's a function that render a React Element.\" },\n      { id: 3, text: \"I don't know.\" }\n    ]\n  },\n  {\n    id: 2,\n    type: \"checkbox\",\n    text: \"Choose fruits in this list.\",\n    correctAnswer: [\"Apple\", \"Orange\"],\n    answers: [\n      { id: 1, text: \"Apple\" },\n      { id: 2, text: \"Orange\" },\n      { id: 3, text: \"Eggplant\" }\n    ]\n  },\n  {\n    id: 3,\n    type: \"checkbox\",\n    text: \"What are the most popular languages for web?\",\n    correctAnswer: [\"JavaScript\", \"PHP\"],\n    answers: [\n      { id: 1, text: \"JavaScript\" },\n      { id: 2, text: \"Perl\" },\n      { id: 3, text: \"PHP\" },\n      { id: 4, text: \"Go\" },\n      { id: 5, text: \"Dart\" }\n    ]\n  },\n  {\n    id: 4,\n    type: \"fill\",\n    text: \"What is the one of the most important thing in our life?\",\n    correctAnswer: \"The opportunity to live\"\n  },\n  {\n    id: 5,\n    type: \"fill\",\n    text: \"What is founder's name of Microsoft?\",\n    correctAnswer: \"Bill\"\n  },\n  {\n    id: 6,\n    type: \"radio\",\n    text: \"What is color that attracts people?\",\n    correctAnswer: \"blue\",\n    answers: [\n      { id: 1, text: \"blue\" },\n      { id: 2, text: \"green\" },\n      { id: 3, text: \"dark\" }\n    ]\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      type: \"list\"\n    };\n  }\n\n  handleToggle = (_, { checked }) => {\n    if (checked) {\n      this.setState({\n        type: \"arrows\"\n      });\n    } else {\n      this.setState({\n        type: \"list\"\n      });\n    }\n  };\n\n  render() {\n    const { type } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Controls>\n          <Radio toggle label={type} onChange={this.handleToggle} />\n        </Controls>\n        <Poll questions={poll} type={type} name=\"General questions\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}